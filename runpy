#!/usr/bin/python3

import argparse
import logging
import os
import shutil
import subprocess
import time

# init logger
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("INTERPRETER",
        help="the interpreter the file should be executed with", 
        type=str)
parser.add_argument("EXEC_FILE",
        help="file to be executed", type=str)
parser.add_argument('WATCH_FILE', help='file to be watched',
        nargs='?', default=False)
args = parser.parse_args()

# get args from argparse
interpreter = args.INTERPRETER
exec_file = args.EXEC_FILE

# check if there is a watch-file
if args.WATCH_FILE:
    watch_file = args.WATCH_FILE

# use the exec-file for watching
else:
    watch_file = exec_file

# check if interpreter is valid
if not shutil.which(interpreter):
    logger.error(interpreter + " not found")
    exit()

# check if exec-file is valid
if not os.path.isfile(exec_file):
    logger.error(exec_file + " not found")
    exit()

# check if watch-file is valid
if not os.path.isfile(watch_file):
    logger.error(watch_file + " not found")
    exit()

# to exit while loop
try:

    # This while runs until you press ctr-c
    while True:
        # read exec_file
        text = open(watch_file).read()

        # check if watch-file content has changed
        # and sleep for 1 sec if not
        while text == open(watch_file).read():
            time.sleep(1)

        # get screen width
        dims = subprocess.check_output(['stty size', 'r'],
                shell=True).split()
        width = int(dims[1].decode('utf-8'))

        # print title
        hash_row = "#" * int((width / 2 - 12))
        print(hash_row + " Executing New Version " + hash_row)

        # get time before command execution
        start_time = time.time()

        # execute command
        subprocess.call([interpreter, exec_file])

        # print result-title
        hash_row = "#" * int((width / 2 - 9))
        print(hash_row + " Performance Data " + hash_row)

        # print time the command has taken
        exec_time = str(time.time() - start_time) + " sec"
        whitespaces = " " * (width - len(exec_time) - 5)
        print("#", exec_time, whitespaces, "#")

        # print end seperator and newline
        print("#" * width + "\n")

except KeyboardInterrupt:
    pass
